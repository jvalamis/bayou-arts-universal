name: Quality Gates

on:
  workflow_run:
    workflows: ["Deploy Flutter App"]
    types: [completed]

jobs:
  smoke-tests:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"

      - name: Install Playwright
        run: |
          npm install -D @playwright/test
          npx playwright install --with-deps

      - name: Run Smoke Tests
        run: |
          PAGE_URL="https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}"
          echo "🧪 Running smoke tests on: $PAGE_URL"

          # Create Playwright test
          cat > smoke-tests.spec.js << 'EOF'
          const { test, expect } = require('@playwright/test');

          test.describe('Eddie App Smoke Tests', () => {
            test('should load without console errors', async ({ page }) => {
              const consoleErrors = [];
              
              page.on('console', msg => {
                if (msg.type() === 'error') {
                  consoleErrors.push(msg.text());
                }
              });
              
              page.on('pageerror', error => {
                consoleErrors.push(error.message);
              });
              
              await page.goto(process.env.PAGE_URL, { 
                waitUntil: 'networkidle',
                timeout: 30000 
              });
              
              // Wait for Flutter to initialize
              await page.waitForFunction(() => {
                return window.flutter !== undefined || 
                       document.querySelector('flutter-view') !== null ||
                       document.querySelector('flt-scene-host') !== null;
              }, { timeout: 30000 });
              
              expect(consoleErrors).toHaveLength(0);
            });

            test('should serve critical files with 200 status', async ({ page, request }) => {
              const baseUrl = process.env.PAGE_URL;
              const criticalFiles = [
                'index.html',
                'assets/AssetManifest.json',
                'assets/FontManifest.json',
                'assets/NOTICES',
                'assets/content/content.json'
              ];
              
              for (const file of criticalFiles) {
                const response = await request.get(`${baseUrl}/${file}`);
                expect(response.status()).toBe(200);
              }
            });

            test('should have proper content structure', async ({ page }) => {
              await page.goto(process.env.PAGE_URL, { 
                waitUntil: 'networkidle',
                timeout: 30000 
              });
              
              // Wait for Flutter to initialize
              await page.waitForFunction(() => {
                return window.flutter !== undefined || 
                       document.querySelector('flutter-view') !== null ||
                       document.querySelector('flt-scene-host') !== null;
              }, { timeout: 30000 });
              
              // Check that content is loaded
              const bodyText = await page.textContent('body');
              expect(bodyText.length).toBeGreaterThan(100);
              
              // Check for Flutter app structure
              const flutterView = await page.$('flutter-view, flt-scene-host');
              expect(flutterView).toBeTruthy();
            });

            test('should be responsive', async ({ page }) => {
              await page.goto(process.env.PAGE_URL, { 
                waitUntil: 'networkidle',
                timeout: 30000 
              });
              
              // Test mobile viewport
              await page.setViewportSize({ width: 375, height: 667 });
              await page.waitForTimeout(1000);
              
              // Test tablet viewport
              await page.setViewportSize({ width: 768, height: 1024 });
              await page.waitForTimeout(1000);
              
              // Test desktop viewport
              await page.setViewportSize({ width: 1920, height: 1080 });
              await page.waitForTimeout(1000);
              
              // Verify content is still visible
              const bodyText = await page.textContent('body');
              expect(bodyText.length).toBeGreaterThan(100);
            });
          });
          EOF

          # Run tests
          PAGE_URL="$PAGE_URL" npx playwright test smoke-tests.spec.js

      - name: Run Lighthouse CI
        run: |
          npm install -g @lhci/cli@0.12.x

          PAGE_URL="https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}"
          echo "🔍 Running Lighthouse CI on: $PAGE_URL"

          # Create Lighthouse CI config
          cat > lighthouserc.js << 'EOF'
          module.exports = {
            ci: {
              collect: {
                url: [process.env.PAGE_URL],
                numberOfRuns: 3,
              },
              assert: {
                assertions: {
                  'categories:performance': ['error', { minScore: 0.9 }],
                  'categories:accessibility': ['error', { minScore: 0.9 }],
                  'categories:best-practices': ['warn', { minScore: 0.8 }],
                  'categories:seo': ['warn', { minScore: 0.8 }],
                },
              },
              upload: {
                target: 'temporary-public-storage',
              },
            },
          };
          EOF

          # Run Lighthouse CI
          PAGE_URL="$PAGE_URL" lhci autorun

  quality-report:
    runs-on: ubuntu-latest
    needs: smoke-tests
    if: always()

    steps:
      - name: Quality Report
        run: |
          if [ "${{ needs.smoke-tests.result }}" == "success" ]; then
            echo "✅ All quality gates passed!"
            echo "🎉 Eddie app is production-ready"
          else
            echo "❌ Quality gates failed"
            echo "🔧 Please check the smoke tests and Lighthouse results"
            exit 1
          fi
